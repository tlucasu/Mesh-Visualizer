//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/MeshVisualizer/Runtime/Input/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace MeshVisualizer.Input
{
    public partial class @InputControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""42b183b0-c2a1-4512-b943-aa8abe910b63"",
            ""actions"": [
                {
                    ""name"": ""Screen Drag"",
                    ""type"": ""Value"",
                    ""id"": ""de59e109-5221-477f-9146-138cf9d41979"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Screen Press"",
                    ""type"": ""Button"",
                    ""id"": ""ebe229df-27ad-4c38-9c2c-ea7cf4fa0f45"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e8031970-3768-407f-b4e0-29a58c19f9f7"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Screen Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6fff3da3-159b-4779-9cfa-763569170b03"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Screen Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d40b4ca4-3da4-424f-827a-35d280e1e866"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Screen Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22840a80-5b58-43e0-8031-d0ea2264dff5"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Screen Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Default
            m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
            m_Default_ScreenDrag = m_Default.FindAction("Screen Drag", throwIfNotFound: true);
            m_Default_ScreenPress = m_Default.FindAction("Screen Press", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Default
        private readonly InputActionMap m_Default;
        private IDefaultActions m_DefaultActionsCallbackInterface;
        private readonly InputAction m_Default_ScreenDrag;
        private readonly InputAction m_Default_ScreenPress;
        public struct DefaultActions
        {
            private @InputControls m_Wrapper;
            public DefaultActions(@InputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @ScreenDrag => m_Wrapper.m_Default_ScreenDrag;
            public InputAction @ScreenPress => m_Wrapper.m_Default_ScreenPress;
            public InputActionMap Get() { return m_Wrapper.m_Default; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
            public void SetCallbacks(IDefaultActions instance)
            {
                if (m_Wrapper.m_DefaultActionsCallbackInterface != null)
                {
                    @ScreenDrag.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnScreenDrag;
                    @ScreenDrag.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnScreenDrag;
                    @ScreenDrag.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnScreenDrag;
                    @ScreenPress.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnScreenPress;
                    @ScreenPress.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnScreenPress;
                    @ScreenPress.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnScreenPress;
                }
                m_Wrapper.m_DefaultActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @ScreenDrag.started += instance.OnScreenDrag;
                    @ScreenDrag.performed += instance.OnScreenDrag;
                    @ScreenDrag.canceled += instance.OnScreenDrag;
                    @ScreenPress.started += instance.OnScreenPress;
                    @ScreenPress.performed += instance.OnScreenPress;
                    @ScreenPress.canceled += instance.OnScreenPress;
                }
            }
        }
        public DefaultActions @Default => new DefaultActions(this);
        public interface IDefaultActions
        {
            void OnScreenDrag(InputAction.CallbackContext context);
            void OnScreenPress(InputAction.CallbackContext context);
        }
    }
}
